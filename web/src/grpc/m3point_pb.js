// source: m3point.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.m3api.ConnectionMsg', null, global);
goog.exportSymbol('proto.m3api.GrowthContextMsg', null, global);
goog.exportSymbol('proto.m3api.PointMsg', null, global);
goog.exportSymbol('proto.m3api.PointPackDataMsg', null, global);
goog.exportSymbol('proto.m3api.TrioMsg', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.m3api.PointMsg = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.m3api.PointMsg, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.m3api.PointMsg.displayName = 'proto.m3api.PointMsg';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.m3api.ConnectionMsg = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.m3api.ConnectionMsg, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.m3api.ConnectionMsg.displayName = 'proto.m3api.ConnectionMsg';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.m3api.TrioMsg = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.m3api.TrioMsg.repeatedFields_, null);
};
goog.inherits(proto.m3api.TrioMsg, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.m3api.TrioMsg.displayName = 'proto.m3api.TrioMsg';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.m3api.GrowthContextMsg = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.m3api.GrowthContextMsg, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.m3api.GrowthContextMsg.displayName = 'proto.m3api.GrowthContextMsg';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.m3api.PointPackDataMsg = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.m3api.PointPackDataMsg.repeatedFields_, null);
};
goog.inherits(proto.m3api.PointPackDataMsg, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.m3api.PointPackDataMsg.displayName = 'proto.m3api.PointPackDataMsg';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.m3api.PointMsg.prototype.toObject = function(opt_includeInstance) {
  return proto.m3api.PointMsg.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.m3api.PointMsg} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.m3api.PointMsg.toObject = function(includeInstance, msg) {
  var f, obj = {
    x: jspb.Message.getFieldWithDefault(msg, 2, 0),
    y: jspb.Message.getFieldWithDefault(msg, 3, 0),
    z: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.m3api.PointMsg}
 */
proto.m3api.PointMsg.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.m3api.PointMsg;
  return proto.m3api.PointMsg.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.m3api.PointMsg} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.m3api.PointMsg}
 */
proto.m3api.PointMsg.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 2:
      var value = /** @type {number} */ (reader.readSint32());
      msg.setX(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readSint32());
      msg.setY(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readSint32());
      msg.setZ(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.m3api.PointMsg.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.m3api.PointMsg.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.m3api.PointMsg} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.m3api.PointMsg.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getX();
  if (f !== 0) {
    writer.writeSint32(
      2,
      f
    );
  }
  f = message.getY();
  if (f !== 0) {
    writer.writeSint32(
      3,
      f
    );
  }
  f = message.getZ();
  if (f !== 0) {
    writer.writeSint32(
      4,
      f
    );
  }
};


/**
 * optional sint32 x = 2;
 * @return {number}
 */
proto.m3api.PointMsg.prototype.getX = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.m3api.PointMsg} returns this
 */
proto.m3api.PointMsg.prototype.setX = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional sint32 y = 3;
 * @return {number}
 */
proto.m3api.PointMsg.prototype.getY = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.m3api.PointMsg} returns this
 */
proto.m3api.PointMsg.prototype.setY = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional sint32 z = 4;
 * @return {number}
 */
proto.m3api.PointMsg.prototype.getZ = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.m3api.PointMsg} returns this
 */
proto.m3api.PointMsg.prototype.setZ = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.m3api.ConnectionMsg.prototype.toObject = function(opt_includeInstance) {
  return proto.m3api.ConnectionMsg.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.m3api.ConnectionMsg} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.m3api.ConnectionMsg.toObject = function(includeInstance, msg) {
  var f, obj = {
    connId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    vector: (f = msg.getVector()) && proto.m3api.PointMsg.toObject(includeInstance, f),
    ds: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.m3api.ConnectionMsg}
 */
proto.m3api.ConnectionMsg.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.m3api.ConnectionMsg;
  return proto.m3api.ConnectionMsg.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.m3api.ConnectionMsg} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.m3api.ConnectionMsg}
 */
proto.m3api.ConnectionMsg.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readSint32());
      msg.setConnId(value);
      break;
    case 2:
      var value = new proto.m3api.PointMsg;
      reader.readMessage(value,proto.m3api.PointMsg.deserializeBinaryFromReader);
      msg.setVector(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setDs(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.m3api.ConnectionMsg.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.m3api.ConnectionMsg.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.m3api.ConnectionMsg} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.m3api.ConnectionMsg.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getConnId();
  if (f !== 0) {
    writer.writeSint32(
      1,
      f
    );
  }
  f = message.getVector();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.m3api.PointMsg.serializeBinaryToWriter
    );
  }
  f = message.getDs();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
};


/**
 * optional sint32 conn_id = 1;
 * @return {number}
 */
proto.m3api.ConnectionMsg.prototype.getConnId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.m3api.ConnectionMsg} returns this
 */
proto.m3api.ConnectionMsg.prototype.setConnId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional PointMsg vector = 2;
 * @return {?proto.m3api.PointMsg}
 */
proto.m3api.ConnectionMsg.prototype.getVector = function() {
  return /** @type{?proto.m3api.PointMsg} */ (
    jspb.Message.getWrapperField(this, proto.m3api.PointMsg, 2));
};


/**
 * @param {?proto.m3api.PointMsg|undefined} value
 * @return {!proto.m3api.ConnectionMsg} returns this
*/
proto.m3api.ConnectionMsg.prototype.setVector = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.m3api.ConnectionMsg} returns this
 */
proto.m3api.ConnectionMsg.prototype.clearVector = function() {
  return this.setVector(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.m3api.ConnectionMsg.prototype.hasVector = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional int64 ds = 3;
 * @return {number}
 */
proto.m3api.ConnectionMsg.prototype.getDs = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.m3api.ConnectionMsg} returns this
 */
proto.m3api.ConnectionMsg.prototype.setDs = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.m3api.TrioMsg.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.m3api.TrioMsg.prototype.toObject = function(opt_includeInstance) {
  return proto.m3api.TrioMsg.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.m3api.TrioMsg} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.m3api.TrioMsg.toObject = function(includeInstance, msg) {
  var f, obj = {
    trioId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    connIdsList: (f = jspb.Message.getRepeatedField(msg, 2)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.m3api.TrioMsg}
 */
proto.m3api.TrioMsg.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.m3api.TrioMsg;
  return proto.m3api.TrioMsg.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.m3api.TrioMsg} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.m3api.TrioMsg}
 */
proto.m3api.TrioMsg.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setTrioId(value);
      break;
    case 2:
      var value = /** @type {!Array<number>} */ (reader.readPackedSint32());
      msg.setConnIdsList(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.m3api.TrioMsg.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.m3api.TrioMsg.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.m3api.TrioMsg} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.m3api.TrioMsg.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTrioId();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getConnIdsList();
  if (f.length > 0) {
    writer.writePackedSint32(
      2,
      f
    );
  }
};


/**
 * optional int32 trio_id = 1;
 * @return {number}
 */
proto.m3api.TrioMsg.prototype.getTrioId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.m3api.TrioMsg} returns this
 */
proto.m3api.TrioMsg.prototype.setTrioId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * repeated sint32 conn_ids = 2;
 * @return {!Array<number>}
 */
proto.m3api.TrioMsg.prototype.getConnIdsList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 2));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.m3api.TrioMsg} returns this
 */
proto.m3api.TrioMsg.prototype.setConnIdsList = function(value) {
  return jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.m3api.TrioMsg} returns this
 */
proto.m3api.TrioMsg.prototype.addConnIds = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.m3api.TrioMsg} returns this
 */
proto.m3api.TrioMsg.prototype.clearConnIdsList = function() {
  return this.setConnIdsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.m3api.GrowthContextMsg.prototype.toObject = function(opt_includeInstance) {
  return proto.m3api.GrowthContextMsg.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.m3api.GrowthContextMsg} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.m3api.GrowthContextMsg.toObject = function(includeInstance, msg) {
  var f, obj = {
    growthContextId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    growthType: jspb.Message.getFieldWithDefault(msg, 2, 0),
    growthIndex: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.m3api.GrowthContextMsg}
 */
proto.m3api.GrowthContextMsg.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.m3api.GrowthContextMsg;
  return proto.m3api.GrowthContextMsg.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.m3api.GrowthContextMsg} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.m3api.GrowthContextMsg}
 */
proto.m3api.GrowthContextMsg.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setGrowthContextId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setGrowthType(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setGrowthIndex(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.m3api.GrowthContextMsg.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.m3api.GrowthContextMsg.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.m3api.GrowthContextMsg} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.m3api.GrowthContextMsg.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getGrowthContextId();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getGrowthType();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getGrowthIndex();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
};


/**
 * optional int32 growth_context_id = 1;
 * @return {number}
 */
proto.m3api.GrowthContextMsg.prototype.getGrowthContextId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.m3api.GrowthContextMsg} returns this
 */
proto.m3api.GrowthContextMsg.prototype.setGrowthContextId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int32 growth_type = 2;
 * @return {number}
 */
proto.m3api.GrowthContextMsg.prototype.getGrowthType = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.m3api.GrowthContextMsg} returns this
 */
proto.m3api.GrowthContextMsg.prototype.setGrowthType = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int32 growth_index = 3;
 * @return {number}
 */
proto.m3api.GrowthContextMsg.prototype.getGrowthIndex = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.m3api.GrowthContextMsg} returns this
 */
proto.m3api.GrowthContextMsg.prototype.setGrowthIndex = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.m3api.PointPackDataMsg.repeatedFields_ = [1, 2, 3, 6, 7, 8];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.m3api.PointPackDataMsg.prototype.toObject = function(opt_includeInstance) {
  return proto.m3api.PointPackDataMsg.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.m3api.PointPackDataMsg} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.m3api.PointPackDataMsg.toObject = function(includeInstance, msg) {
  var f, obj = {
      allConnectionsList: jspb.Message.toObjectList(msg.getAllConnectionsList(),
          proto.m3api.ConnectionMsg.toObject, includeInstance),
      allTriosList: jspb.Message.toObjectList(msg.getAllTriosList(),
          proto.m3api.TrioMsg.toObject, includeInstance),
      allGrowthContextsList: jspb.Message.toObjectList(msg.getAllGrowthContextsList(),
          proto.m3api.GrowthContextMsg.toObject, includeInstance),
      validNextTrioIdsList: (f = jspb.Message.getRepeatedField(msg, 6)) == null ? undefined : f,
      mod4PermutationsTrioIdsList: (f = jspb.Message.getRepeatedField(msg, 7)) == null ? undefined : f,
      mod8PermutationsTrioIdsList: (f = jspb.Message.getRepeatedField(msg, 8)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.m3api.PointPackDataMsg}
 */
proto.m3api.PointPackDataMsg.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.m3api.PointPackDataMsg;
  return proto.m3api.PointPackDataMsg.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.m3api.PointPackDataMsg} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.m3api.PointPackDataMsg}
 */
proto.m3api.PointPackDataMsg.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
      if (reader.isEndGroup()) {
          break;
      }
      var field = reader.getFieldNumber();
      switch (field) {
          case 1:
              var value = new proto.m3api.ConnectionMsg;
              reader.readMessage(value, proto.m3api.ConnectionMsg.deserializeBinaryFromReader);
              msg.addAllConnections(value);
              break;
          case 2:
              var value = new proto.m3api.TrioMsg;
              reader.readMessage(value, proto.m3api.TrioMsg.deserializeBinaryFromReader);
              msg.addAllTrios(value);
              break;
          case 3:
              var value = new proto.m3api.GrowthContextMsg;
              reader.readMessage(value, proto.m3api.GrowthContextMsg.deserializeBinaryFromReader);
              msg.addAllGrowthContexts(value);
              break;
          case 6:
              var value = /** @type {!Array<number>} */ (reader.readPackedInt32());
              msg.setValidNextTrioIdsList(value);
              break;
          case 7:
              var value = /** @type {!Array<number>} */ (reader.readPackedInt32());
              msg.setMod4PermutationsTrioIdsList(value);
              break;
          case 8:
              var value = /** @type {!Array<number>} */ (reader.readPackedInt32());
              msg.setMod8PermutationsTrioIdsList(value);
              break;
          default:
              reader.skipField();
              break;
      }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.m3api.PointPackDataMsg.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.m3api.PointPackDataMsg.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.m3api.PointPackDataMsg} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.m3api.PointPackDataMsg.serializeBinaryToWriter = function(message, writer) {
    var f = undefined;
    f = message.getAllConnectionsList();
    if (f.length > 0) {
        writer.writeRepeatedMessage(
            1,
            f,
            proto.m3api.ConnectionMsg.serializeBinaryToWriter
        );
    }
    f = message.getAllTriosList();
    if (f.length > 0) {
        writer.writeRepeatedMessage(
            2,
            f,
            proto.m3api.TrioMsg.serializeBinaryToWriter
        );
    }
    f = message.getAllGrowthContextsList();
    if (f.length > 0) {
        writer.writeRepeatedMessage(
            3,
            f,
            proto.m3api.GrowthContextMsg.serializeBinaryToWriter
        );
    }
    f = message.getValidNextTrioIdsList();
    if (f.length > 0) {
        writer.writePackedInt32(
            6,
            f
        );
    }
    f = message.getMod4PermutationsTrioIdsList();
    if (f.length > 0) {
        writer.writePackedInt32(
            7,
            f
        );
    }
    f = message.getMod8PermutationsTrioIdsList();
    if (f.length > 0) {
        writer.writePackedInt32(
            8,
            f
        );
    }
};


/**
 * repeated ConnectionMsg all_connections = 1;
 * @return {!Array<!proto.m3api.ConnectionMsg>}
 */
proto.m3api.PointPackDataMsg.prototype.getAllConnectionsList = function() {
  return /** @type{!Array<!proto.m3api.ConnectionMsg>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.m3api.ConnectionMsg, 1));
};


/**
 * @param {!Array<!proto.m3api.ConnectionMsg>} value
 * @return {!proto.m3api.PointPackDataMsg} returns this
*/
proto.m3api.PointPackDataMsg.prototype.setAllConnectionsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.m3api.ConnectionMsg=} opt_value
 * @param {number=} opt_index
 * @return {!proto.m3api.ConnectionMsg}
 */
proto.m3api.PointPackDataMsg.prototype.addAllConnections = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.m3api.ConnectionMsg, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.m3api.PointPackDataMsg} returns this
 */
proto.m3api.PointPackDataMsg.prototype.clearAllConnectionsList = function() {
  return this.setAllConnectionsList([]);
};


/**
 * repeated TrioMsg all_trios = 2;
 * @return {!Array<!proto.m3api.TrioMsg>}
 */
proto.m3api.PointPackDataMsg.prototype.getAllTriosList = function() {
  return /** @type{!Array<!proto.m3api.TrioMsg>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.m3api.TrioMsg, 2));
};


/**
 * @param {!Array<!proto.m3api.TrioMsg>} value
 * @return {!proto.m3api.PointPackDataMsg} returns this
*/
proto.m3api.PointPackDataMsg.prototype.setAllTriosList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.m3api.TrioMsg=} opt_value
 * @param {number=} opt_index
 * @return {!proto.m3api.TrioMsg}
 */
proto.m3api.PointPackDataMsg.prototype.addAllTrios = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.m3api.TrioMsg, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.m3api.PointPackDataMsg} returns this
 */
proto.m3api.PointPackDataMsg.prototype.clearAllTriosList = function () {
    return this.setAllTriosList([]);
};


/**
 * repeated GrowthContextMsg all_growth_contexts = 3;
 * @return {!Array<!proto.m3api.GrowthContextMsg>}
 */
proto.m3api.PointPackDataMsg.prototype.getAllGrowthContextsList = function () {
    return /** @type{!Array<!proto.m3api.GrowthContextMsg>} */ (
        jspb.Message.getRepeatedWrapperField(this, proto.m3api.GrowthContextMsg, 3));
};


/**
 * @param {!Array<!proto.m3api.GrowthContextMsg>} value
 * @return {!proto.m3api.PointPackDataMsg} returns this
 */
proto.m3api.PointPackDataMsg.prototype.setAllGrowthContextsList = function (value) {
    return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.m3api.GrowthContextMsg=} opt_value
 * @param {number=} opt_index
 * @return {!proto.m3api.GrowthContextMsg}
 */
proto.m3api.PointPackDataMsg.prototype.addAllGrowthContexts = function (opt_value, opt_index) {
    return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.m3api.GrowthContextMsg, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.m3api.PointPackDataMsg} returns this
 */
proto.m3api.PointPackDataMsg.prototype.clearAllGrowthContextsList = function () {
    return this.setAllGrowthContextsList([]);
};


/**
 * repeated int32 valid_next_trio_ids = 6;
 * @return {!Array<number>}
 */
proto.m3api.PointPackDataMsg.prototype.getValidNextTrioIdsList = function () {
    return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 6));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.m3api.PointPackDataMsg} returns this
 */
proto.m3api.PointPackDataMsg.prototype.setValidNextTrioIdsList = function(value) {
  return jspb.Message.setField(this, 6, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.m3api.PointPackDataMsg} returns this
 */
proto.m3api.PointPackDataMsg.prototype.addValidNextTrioIds = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 6, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.m3api.PointPackDataMsg} returns this
 */
proto.m3api.PointPackDataMsg.prototype.clearValidNextTrioIdsList = function() {
  return this.setValidNextTrioIdsList([]);
};


/**
 * repeated int32 mod4_permutations_trio_ids = 7;
 * @return {!Array<number>}
 */
proto.m3api.PointPackDataMsg.prototype.getMod4PermutationsTrioIdsList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 7));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.m3api.PointPackDataMsg} returns this
 */
proto.m3api.PointPackDataMsg.prototype.setMod4PermutationsTrioIdsList = function(value) {
  return jspb.Message.setField(this, 7, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.m3api.PointPackDataMsg} returns this
 */
proto.m3api.PointPackDataMsg.prototype.addMod4PermutationsTrioIds = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 7, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.m3api.PointPackDataMsg} returns this
 */
proto.m3api.PointPackDataMsg.prototype.clearMod4PermutationsTrioIdsList = function() {
  return this.setMod4PermutationsTrioIdsList([]);
};


/**
 * repeated int32 mod8_permutations_trio_ids = 8;
 * @return {!Array<number>}
 */
proto.m3api.PointPackDataMsg.prototype.getMod8PermutationsTrioIdsList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 8));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.m3api.PointPackDataMsg} returns this
 */
proto.m3api.PointPackDataMsg.prototype.setMod8PermutationsTrioIdsList = function(value) {
  return jspb.Message.setField(this, 8, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.m3api.PointPackDataMsg} returns this
 */
proto.m3api.PointPackDataMsg.prototype.addMod8PermutationsTrioIds = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 8, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.m3api.PointPackDataMsg} returns this
 */
proto.m3api.PointPackDataMsg.prototype.clearMod8PermutationsTrioIdsList = function() {
  return this.setMod8PermutationsTrioIdsList([]);
};


goog.object.extend(exports, proto.m3api);
