// source: m3space.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var m3point_pb = require('./m3point_pb.js');
goog.object.extend(proto, m3point_pb);
goog.exportSymbol('proto.m3api.CreateEventRequestMsg', null, global);
goog.exportSymbol('proto.m3api.EventListMsg', null, global);
goog.exportSymbol('proto.m3api.EventMsg', null, global);
goog.exportSymbol('proto.m3api.FindEventsMsg', null, global);
goog.exportSymbol('proto.m3api.FindNodeEventsMsg', null, global);
goog.exportSymbol('proto.m3api.NodeEventListMsg', null, global);
goog.exportSymbol('proto.m3api.NodeEventMsg', null, global);
goog.exportSymbol('proto.m3api.SpaceListMsg', null, global);
goog.exportSymbol('proto.m3api.SpaceMsg', null, global);
goog.exportSymbol('proto.m3api.SpaceTimeRequestMsg', null, global);
goog.exportSymbol('proto.m3api.SpaceTimeResponseMsg', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.m3api.SpaceMsg = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, proto.m3api.SpaceMsg.repeatedFields_, null);
};
goog.inherits(proto.m3api.SpaceMsg, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    /**
     * @public
     * @override
     */
    proto.m3api.SpaceMsg.displayName = 'proto.m3api.SpaceMsg';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.m3api.SpaceListMsg = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, proto.m3api.SpaceListMsg.repeatedFields_, null);
};
goog.inherits(proto.m3api.SpaceListMsg, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    /**
     * @public
     * @override
     */
    proto.m3api.SpaceListMsg.displayName = 'proto.m3api.SpaceListMsg';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.m3api.CreateEventRequestMsg = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.m3api.CreateEventRequestMsg, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    /**
     * @public
     * @override
     */
    proto.m3api.CreateEventRequestMsg.displayName = 'proto.m3api.CreateEventRequestMsg';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.m3api.NodeEventMsg = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, proto.m3api.NodeEventMsg.repeatedFields_, null);
};
goog.inherits(proto.m3api.NodeEventMsg, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    /**
     * @public
     * @override
     */
    proto.m3api.NodeEventMsg.displayName = 'proto.m3api.NodeEventMsg';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.m3api.FindEventsMsg = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.m3api.FindEventsMsg, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    /**
     * @public
     * @override
     */
    proto.m3api.FindEventsMsg.displayName = 'proto.m3api.FindEventsMsg';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.m3api.EventMsg = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.m3api.EventMsg, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    /**
     * @public
     * @override
     */
    proto.m3api.EventMsg.displayName = 'proto.m3api.EventMsg';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.m3api.EventListMsg = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, proto.m3api.EventListMsg.repeatedFields_, null);
};
goog.inherits(proto.m3api.EventListMsg, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    /**
     * @public
     * @override
     */
    proto.m3api.EventListMsg.displayName = 'proto.m3api.EventListMsg';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.m3api.FindNodeEventsMsg = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.m3api.FindNodeEventsMsg, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    /**
     * @public
     * @override
     */
    proto.m3api.FindNodeEventsMsg.displayName = 'proto.m3api.FindNodeEventsMsg';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.m3api.NodeEventListMsg = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, proto.m3api.NodeEventListMsg.repeatedFields_, null);
};
goog.inherits(proto.m3api.NodeEventListMsg, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    /**
     * @public
     * @override
     */
    proto.m3api.NodeEventListMsg.displayName = 'proto.m3api.NodeEventListMsg';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.m3api.SpaceTimeRequestMsg = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.m3api.SpaceTimeRequestMsg, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    /**
     * @public
     * @override
     */
    proto.m3api.SpaceTimeRequestMsg.displayName = 'proto.m3api.SpaceTimeRequestMsg';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.m3api.SpaceTimeResponseMsg = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, proto.m3api.SpaceTimeResponseMsg.repeatedFields_, null);
};
goog.inherits(proto.m3api.SpaceTimeResponseMsg, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    /**
     * @public
     * @override
     */
    proto.m3api.SpaceTimeResponseMsg.displayName = 'proto.m3api.SpaceTimeResponseMsg';
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.m3api.SpaceMsg.repeatedFields_ = [9];



if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * Optional fields that are not set will be set to undefined.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
     * @param {boolean=} opt_includeInstance Deprecated. whether to include the
     *     JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.m3api.SpaceMsg.prototype.toObject = function (opt_includeInstance) {
        return proto.m3api.SpaceMsg.toObject(opt_includeInstance, this);
    };


    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Deprecated. Whether to include
     *     the JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.m3api.SpaceMsg} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.m3api.SpaceMsg.toObject = function (includeInstance, msg) {
        var f, obj = {
            spaceId: jspb.Message.getFieldWithDefault(msg, 1, 0),
            spaceName: jspb.Message.getFieldWithDefault(msg, 2, ""),
            activeThreshold: jspb.Message.getFieldWithDefault(msg, 3, 0),
            maxTriosPerPoint: jspb.Message.getFieldWithDefault(msg, 4, 0),
            maxNodesPerPoint: jspb.Message.getFieldWithDefault(msg, 5, 0),
            maxTime: jspb.Message.getFieldWithDefault(msg, 6, 0),
            maxCoord: jspb.Message.getFieldWithDefault(msg, 8, 0),
            eventIdsList: (f = jspb.Message.getRepeatedField(msg, 9)) == null ? undefined : f
        };

        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.m3api.SpaceMsg}
 */
proto.m3api.SpaceMsg.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.m3api.SpaceMsg;
    return proto.m3api.SpaceMsg.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.m3api.SpaceMsg} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.m3api.SpaceMsg}
 */
proto.m3api.SpaceMsg.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = /** @type {number} */ (reader.readInt32());
                msg.setSpaceId(value);
                break;
            case 2:
                var value = /** @type {string} */ (reader.readString());
                msg.setSpaceName(value);
                break;
            case 3:
                var value = /** @type {number} */ (reader.readInt32());
                msg.setActiveThreshold(value);
                break;
            case 4:
                var value = /** @type {number} */ (reader.readInt32());
                msg.setMaxTriosPerPoint(value);
                break;
            case 5:
                var value = /** @type {number} */ (reader.readInt32());
                msg.setMaxNodesPerPoint(value);
                break;
            case 6:
                var value = /** @type {number} */ (reader.readInt32());
                msg.setMaxTime(value);
                break;
            case 8:
                var value = /** @type {number} */ (reader.readInt32());
                msg.setMaxCoord(value);
                break;
            case 9:
                var value = /** @type {!Array<number>} */ (reader.readPackedInt32());
                msg.setEventIdsList(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.m3api.SpaceMsg.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.m3api.SpaceMsg.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.m3api.SpaceMsg} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.m3api.SpaceMsg.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getSpaceId();
    if (f !== 0) {
        writer.writeInt32(
            1,
            f
        );
    }
    f = message.getSpaceName();
    if (f.length > 0) {
        writer.writeString(
            2,
            f
        );
    }
    f = message.getActiveThreshold();
    if (f !== 0) {
        writer.writeInt32(
            3,
            f
        );
    }
    f = message.getMaxTriosPerPoint();
    if (f !== 0) {
        writer.writeInt32(
            4,
            f
        );
    }
    f = message.getMaxNodesPerPoint();
    if (f !== 0) {
        writer.writeInt32(
            5,
            f
        );
    }
    f = message.getMaxTime();
    if (f !== 0) {
        writer.writeInt32(
            6,
            f
        );
    }
    f = message.getMaxCoord();
    if (f !== 0) {
        writer.writeInt32(
            8,
            f
        );
    }
    f = message.getEventIdsList();
    if (f.length > 0) {
        writer.writePackedInt32(
            9,
            f
        );
    }
};


/**
 * optional int32 space_id = 1;
 * @return {number}
 */
proto.m3api.SpaceMsg.prototype.getSpaceId = function () {
    return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.m3api.SpaceMsg} returns this
 */
proto.m3api.SpaceMsg.prototype.setSpaceId = function (value) {
    return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string space_name = 2;
 * @return {string}
 */
proto.m3api.SpaceMsg.prototype.getSpaceName = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.m3api.SpaceMsg} returns this
 */
proto.m3api.SpaceMsg.prototype.setSpaceName = function (value) {
    return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional int32 active_threshold = 3;
 * @return {number}
 */
proto.m3api.SpaceMsg.prototype.getActiveThreshold = function () {
    return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.m3api.SpaceMsg} returns this
 */
proto.m3api.SpaceMsg.prototype.setActiveThreshold = function (value) {
    return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional int32 max_trios_per_point = 4;
 * @return {number}
 */
proto.m3api.SpaceMsg.prototype.getMaxTriosPerPoint = function () {
    return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.m3api.SpaceMsg} returns this
 */
proto.m3api.SpaceMsg.prototype.setMaxTriosPerPoint = function (value) {
    return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional int32 max_nodes_per_point = 5;
 * @return {number}
 */
proto.m3api.SpaceMsg.prototype.getMaxNodesPerPoint = function () {
    return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.m3api.SpaceMsg} returns this
 */
proto.m3api.SpaceMsg.prototype.setMaxNodesPerPoint = function (value) {
    return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional int32 max_time = 6;
 * @return {number}
 */
proto.m3api.SpaceMsg.prototype.getMaxTime = function () {
    return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.m3api.SpaceMsg} returns this
 */
proto.m3api.SpaceMsg.prototype.setMaxTime = function (value) {
    return jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional int32 max_coord = 8;
 * @return {number}
 */
proto.m3api.SpaceMsg.prototype.getMaxCoord = function () {
    return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/**
 * @param {number} value
 * @return {!proto.m3api.SpaceMsg} returns this
 */
proto.m3api.SpaceMsg.prototype.setMaxCoord = function (value) {
    return jspb.Message.setProto3IntField(this, 8, value);
};


/**
 * repeated int32 event_ids = 9;
 * @return {!Array<number>}
 */
proto.m3api.SpaceMsg.prototype.getEventIdsList = function () {
    return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 9));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.m3api.SpaceMsg} returns this
 */
proto.m3api.SpaceMsg.prototype.setEventIdsList = function (value) {
    return jspb.Message.setField(this, 9, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.m3api.SpaceMsg} returns this
 */
proto.m3api.SpaceMsg.prototype.addEventIds = function (value, opt_index) {
    return jspb.Message.addToRepeatedField(this, 9, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.m3api.SpaceMsg} returns this
 */
proto.m3api.SpaceMsg.prototype.clearEventIdsList = function () {
    return this.setEventIdsList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.m3api.SpaceListMsg.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * Optional fields that are not set will be set to undefined.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
     * @param {boolean=} opt_includeInstance Deprecated. whether to include the
     *     JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.m3api.SpaceListMsg.prototype.toObject = function (opt_includeInstance) {
        return proto.m3api.SpaceListMsg.toObject(opt_includeInstance, this);
    };


    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Deprecated. Whether to include
     *     the JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.m3api.SpaceListMsg} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.m3api.SpaceListMsg.toObject = function (includeInstance, msg) {
        var f, obj = {
            spacesList: jspb.Message.toObjectList(msg.getSpacesList(),
                proto.m3api.SpaceMsg.toObject, includeInstance)
        };

        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.m3api.SpaceListMsg}
 */
proto.m3api.SpaceListMsg.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.m3api.SpaceListMsg;
    return proto.m3api.SpaceListMsg.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.m3api.SpaceListMsg} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.m3api.SpaceListMsg}
 */
proto.m3api.SpaceListMsg.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = new proto.m3api.SpaceMsg;
                reader.readMessage(value, proto.m3api.SpaceMsg.deserializeBinaryFromReader);
                msg.addSpaces(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.m3api.SpaceListMsg.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.m3api.SpaceListMsg.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.m3api.SpaceListMsg} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.m3api.SpaceListMsg.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getSpacesList();
    if (f.length > 0) {
        writer.writeRepeatedMessage(
            1,
            f,
            proto.m3api.SpaceMsg.serializeBinaryToWriter
        );
    }
};


/**
 * repeated SpaceMsg spaces = 1;
 * @return {!Array<!proto.m3api.SpaceMsg>}
 */
proto.m3api.SpaceListMsg.prototype.getSpacesList = function () {
    return /** @type{!Array<!proto.m3api.SpaceMsg>} */ (
        jspb.Message.getRepeatedWrapperField(this, proto.m3api.SpaceMsg, 1));
};


/**
 * @param {!Array<!proto.m3api.SpaceMsg>} value
 * @return {!proto.m3api.SpaceListMsg} returns this
 */
proto.m3api.SpaceListMsg.prototype.setSpacesList = function (value) {
    return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.m3api.SpaceMsg=} opt_value
 * @param {number=} opt_index
 * @return {!proto.m3api.SpaceMsg}
 */
proto.m3api.SpaceListMsg.prototype.addSpaces = function (opt_value, opt_index) {
    return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.m3api.SpaceMsg, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.m3api.SpaceListMsg} returns this
 */
proto.m3api.SpaceListMsg.prototype.clearSpacesList = function () {
    return this.setSpacesList([]);
};


if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * Optional fields that are not set will be set to undefined.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
     * @param {boolean=} opt_includeInstance Deprecated. whether to include the
     *     JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.m3api.CreateEventRequestMsg.prototype.toObject = function (opt_includeInstance) {
        return proto.m3api.CreateEventRequestMsg.toObject(opt_includeInstance, this);
    };


    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Deprecated. Whether to include
     *     the JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.m3api.CreateEventRequestMsg} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.m3api.CreateEventRequestMsg.toObject = function (includeInstance, msg) {
        var f, obj = {
            spaceId: jspb.Message.getFieldWithDefault(msg, 2, 0),
            growthType: jspb.Message.getFieldWithDefault(msg, 3, 0),
            growthIndex: jspb.Message.getFieldWithDefault(msg, 4, 0),
            growthOffset: jspb.Message.getFieldWithDefault(msg, 5, 0),
            creationTime: jspb.Message.getFieldWithDefault(msg, 6, 0),
            center: (f = msg.getCenter()) && m3point_pb.PointMsg.toObject(includeInstance, f),
            color: jspb.Message.getFieldWithDefault(msg, 8, 0)
        };

        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.m3api.CreateEventRequestMsg}
 */
proto.m3api.CreateEventRequestMsg.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.m3api.CreateEventRequestMsg;
    return proto.m3api.CreateEventRequestMsg.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.m3api.CreateEventRequestMsg} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.m3api.CreateEventRequestMsg}
 */
proto.m3api.CreateEventRequestMsg.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 2:
                var value = /** @type {number} */ (reader.readInt32());
                msg.setSpaceId(value);
                break;
            case 3:
                var value = /** @type {number} */ (reader.readInt32());
                msg.setGrowthType(value);
                break;
            case 4:
                var value = /** @type {number} */ (reader.readInt32());
                msg.setGrowthIndex(value);
                break;
            case 5:
                var value = /** @type {number} */ (reader.readInt32());
                msg.setGrowthOffset(value);
                break;
            case 6:
                var value = /** @type {number} */ (reader.readInt32());
                msg.setCreationTime(value);
                break;
            case 7:
                var value = new m3point_pb.PointMsg;
                reader.readMessage(value, m3point_pb.PointMsg.deserializeBinaryFromReader);
                msg.setCenter(value);
                break;
            case 8:
                var value = /** @type {number} */ (reader.readUint32());
                msg.setColor(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.m3api.CreateEventRequestMsg.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.m3api.CreateEventRequestMsg.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.m3api.CreateEventRequestMsg} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.m3api.CreateEventRequestMsg.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getSpaceId();
    if (f !== 0) {
        writer.writeInt32(
            2,
            f
        );
    }
    f = message.getGrowthType();
    if (f !== 0) {
        writer.writeInt32(
            3,
            f
        );
    }
    f = message.getGrowthIndex();
    if (f !== 0) {
        writer.writeInt32(
            4,
            f
        );
    }
    f = message.getGrowthOffset();
    if (f !== 0) {
        writer.writeInt32(
            5,
            f
        );
    }
    f = message.getCreationTime();
    if (f !== 0) {
        writer.writeInt32(
            6,
            f
        );
    }
    f = message.getCenter();
    if (f != null) {
        writer.writeMessage(
            7,
            f,
            m3point_pb.PointMsg.serializeBinaryToWriter
        );
    }
    f = message.getColor();
    if (f !== 0) {
        writer.writeUint32(
            8,
            f
        );
    }
};


/**
 * optional int32 space_id = 2;
 * @return {number}
 */
proto.m3api.CreateEventRequestMsg.prototype.getSpaceId = function () {
    return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.m3api.CreateEventRequestMsg} returns this
 */
proto.m3api.CreateEventRequestMsg.prototype.setSpaceId = function (value) {
    return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int32 growth_type = 3;
 * @return {number}
 */
proto.m3api.CreateEventRequestMsg.prototype.getGrowthType = function () {
    return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.m3api.CreateEventRequestMsg} returns this
 */
proto.m3api.CreateEventRequestMsg.prototype.setGrowthType = function (value) {
    return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional int32 growth_index = 4;
 * @return {number}
 */
proto.m3api.CreateEventRequestMsg.prototype.getGrowthIndex = function () {
    return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.m3api.CreateEventRequestMsg} returns this
 */
proto.m3api.CreateEventRequestMsg.prototype.setGrowthIndex = function (value) {
    return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional int32 growth_offset = 5;
 * @return {number}
 */
proto.m3api.CreateEventRequestMsg.prototype.getGrowthOffset = function () {
    return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.m3api.CreateEventRequestMsg} returns this
 */
proto.m3api.CreateEventRequestMsg.prototype.setGrowthOffset = function (value) {
    return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional int32 creation_time = 6;
 * @return {number}
 */
proto.m3api.CreateEventRequestMsg.prototype.getCreationTime = function () {
    return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.m3api.CreateEventRequestMsg} returns this
 */
proto.m3api.CreateEventRequestMsg.prototype.setCreationTime = function (value) {
    return jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional PointMsg center = 7;
 * @return {?proto.m3api.PointMsg}
 */
proto.m3api.CreateEventRequestMsg.prototype.getCenter = function () {
    return /** @type{?proto.m3api.PointMsg} */ (
        jspb.Message.getWrapperField(this, m3point_pb.PointMsg, 7));
};


/**
 * @param {?proto.m3api.PointMsg|undefined} value
 * @return {!proto.m3api.CreateEventRequestMsg} returns this
 */
proto.m3api.CreateEventRequestMsg.prototype.setCenter = function (value) {
    return jspb.Message.setWrapperField(this, 7, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.m3api.CreateEventRequestMsg} returns this
 */
proto.m3api.CreateEventRequestMsg.prototype.clearCenter = function () {
    return this.setCenter(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.m3api.CreateEventRequestMsg.prototype.hasCenter = function () {
    return jspb.Message.getField(this, 7) != null;
};


/**
 * optional uint32 color = 8;
 * @return {number}
 */
proto.m3api.CreateEventRequestMsg.prototype.getColor = function () {
    return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/**
 * @param {number} value
 * @return {!proto.m3api.CreateEventRequestMsg} returns this
 */
proto.m3api.CreateEventRequestMsg.prototype.setColor = function (value) {
    return jspb.Message.setProto3IntField(this, 8, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.m3api.NodeEventMsg.repeatedFields_ = [9];



if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * Optional fields that are not set will be set to undefined.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
     * @param {boolean=} opt_includeInstance Deprecated. whether to include the
     *     JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.m3api.NodeEventMsg.prototype.toObject = function (opt_includeInstance) {
        return proto.m3api.NodeEventMsg.toObject(opt_includeInstance, this);
    };


    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Deprecated. Whether to include
     *     the JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.m3api.NodeEventMsg} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.m3api.NodeEventMsg.toObject = function (includeInstance, msg) {
        var f, obj = {
            eventNodeId: jspb.Message.getFieldWithDefault(msg, 1, 0),
            eventId: jspb.Message.getFieldWithDefault(msg, 2, 0),
            point: (f = msg.getPoint()) && m3point_pb.PointMsg.toObject(includeInstance, f),
            creationTime: jspb.Message.getFieldWithDefault(msg, 4, 0),
            d: jspb.Message.getFieldWithDefault(msg, 5, 0),
            trioId: jspb.Message.getFieldWithDefault(msg, 6, 0),
            connectionMask: jspb.Message.getFieldWithDefault(msg, 7, 0),
            pathNodeId: jspb.Message.getFieldWithDefault(msg, 8, 0),
            linkedNodeIdsList: (f = jspb.Message.getRepeatedField(msg, 9)) == null ? undefined : f
        };

        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.m3api.NodeEventMsg}
 */
proto.m3api.NodeEventMsg.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.m3api.NodeEventMsg;
    return proto.m3api.NodeEventMsg.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.m3api.NodeEventMsg} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.m3api.NodeEventMsg}
 */
proto.m3api.NodeEventMsg.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = /** @type {number} */ (reader.readInt64());
                msg.setEventNodeId(value);
                break;
            case 2:
                var value = /** @type {number} */ (reader.readInt32());
                msg.setEventId(value);
                break;
            case 3:
                var value = new m3point_pb.PointMsg;
                reader.readMessage(value, m3point_pb.PointMsg.deserializeBinaryFromReader);
                msg.setPoint(value);
                break;
            case 4:
                var value = /** @type {number} */ (reader.readInt32());
                msg.setCreationTime(value);
                break;
            case 5:
                var value = /** @type {number} */ (reader.readInt32());
                msg.setD(value);
                break;
            case 6:
                var value = /** @type {number} */ (reader.readInt32());
                msg.setTrioId(value);
                break;
            case 7:
                var value = /** @type {number} */ (reader.readUint32());
                msg.setConnectionMask(value);
                break;
            case 8:
                var value = /** @type {number} */ (reader.readInt64());
                msg.setPathNodeId(value);
                break;
            case 9:
                var value = /** @type {!Array<number>} */ (reader.readPackedInt64());
                msg.setLinkedNodeIdsList(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.m3api.NodeEventMsg.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.m3api.NodeEventMsg.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.m3api.NodeEventMsg} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.m3api.NodeEventMsg.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getEventNodeId();
    if (f !== 0) {
        writer.writeInt64(
            1,
            f
        );
    }
    f = message.getEventId();
    if (f !== 0) {
        writer.writeInt32(
            2,
            f
        );
    }
    f = message.getPoint();
    if (f != null) {
        writer.writeMessage(
            3,
            f,
            m3point_pb.PointMsg.serializeBinaryToWriter
        );
    }
    f = message.getCreationTime();
    if (f !== 0) {
        writer.writeInt32(
            4,
            f
        );
    }
    f = message.getD();
    if (f !== 0) {
        writer.writeInt32(
            5,
            f
        );
    }
    f = message.getTrioId();
    if (f !== 0) {
        writer.writeInt32(
            6,
            f
        );
    }
    f = message.getConnectionMask();
    if (f !== 0) {
        writer.writeUint32(
            7,
            f
        );
    }
    f = message.getPathNodeId();
    if (f !== 0) {
        writer.writeInt64(
            8,
            f
        );
    }
    f = message.getLinkedNodeIdsList();
    if (f.length > 0) {
        writer.writePackedInt64(
            9,
            f
        );
    }
};


/**
 * optional int64 event_node_id = 1;
 * @return {number}
 */
proto.m3api.NodeEventMsg.prototype.getEventNodeId = function () {
    return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.m3api.NodeEventMsg} returns this
 */
proto.m3api.NodeEventMsg.prototype.setEventNodeId = function (value) {
    return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int32 event_id = 2;
 * @return {number}
 */
proto.m3api.NodeEventMsg.prototype.getEventId = function () {
    return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.m3api.NodeEventMsg} returns this
 */
proto.m3api.NodeEventMsg.prototype.setEventId = function (value) {
    return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional PointMsg point = 3;
 * @return {?proto.m3api.PointMsg}
 */
proto.m3api.NodeEventMsg.prototype.getPoint = function () {
    return /** @type{?proto.m3api.PointMsg} */ (
        jspb.Message.getWrapperField(this, m3point_pb.PointMsg, 3));
};


/**
 * @param {?proto.m3api.PointMsg|undefined} value
 * @return {!proto.m3api.NodeEventMsg} returns this
 */
proto.m3api.NodeEventMsg.prototype.setPoint = function (value) {
    return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.m3api.NodeEventMsg} returns this
 */
proto.m3api.NodeEventMsg.prototype.clearPoint = function () {
    return this.setPoint(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.m3api.NodeEventMsg.prototype.hasPoint = function () {
    return jspb.Message.getField(this, 3) != null;
};


/**
 * optional int32 creation_time = 4;
 * @return {number}
 */
proto.m3api.NodeEventMsg.prototype.getCreationTime = function () {
    return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.m3api.NodeEventMsg} returns this
 */
proto.m3api.NodeEventMsg.prototype.setCreationTime = function (value) {
    return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional int32 d = 5;
 * @return {number}
 */
proto.m3api.NodeEventMsg.prototype.getD = function () {
    return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.m3api.NodeEventMsg} returns this
 */
proto.m3api.NodeEventMsg.prototype.setD = function (value) {
    return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional int32 trio_id = 6;
 * @return {number}
 */
proto.m3api.NodeEventMsg.prototype.getTrioId = function () {
    return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.m3api.NodeEventMsg} returns this
 */
proto.m3api.NodeEventMsg.prototype.setTrioId = function (value) {
    return jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional uint32 connection_mask = 7;
 * @return {number}
 */
proto.m3api.NodeEventMsg.prototype.getConnectionMask = function () {
    return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.m3api.NodeEventMsg} returns this
 */
proto.m3api.NodeEventMsg.prototype.setConnectionMask = function (value) {
    return jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional int64 path_node_id = 8;
 * @return {number}
 */
proto.m3api.NodeEventMsg.prototype.getPathNodeId = function () {
    return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/**
 * @param {number} value
 * @return {!proto.m3api.NodeEventMsg} returns this
 */
proto.m3api.NodeEventMsg.prototype.setPathNodeId = function (value) {
    return jspb.Message.setProto3IntField(this, 8, value);
};


/**
 * repeated int64 linked_node_ids = 9;
 * @return {!Array<number>}
 */
proto.m3api.NodeEventMsg.prototype.getLinkedNodeIdsList = function () {
    return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 9));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.m3api.NodeEventMsg} returns this
 */
proto.m3api.NodeEventMsg.prototype.setLinkedNodeIdsList = function (value) {
    return jspb.Message.setField(this, 9, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.m3api.NodeEventMsg} returns this
 */
proto.m3api.NodeEventMsg.prototype.addLinkedNodeIds = function (value, opt_index) {
    return jspb.Message.addToRepeatedField(this, 9, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.m3api.NodeEventMsg} returns this
 */
proto.m3api.NodeEventMsg.prototype.clearLinkedNodeIdsList = function () {
    return this.setLinkedNodeIdsList([]);
};


if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * Optional fields that are not set will be set to undefined.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
     * @param {boolean=} opt_includeInstance Deprecated. whether to include the
     *     JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.m3api.FindEventsMsg.prototype.toObject = function (opt_includeInstance) {
        return proto.m3api.FindEventsMsg.toObject(opt_includeInstance, this);
    };


    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Deprecated. Whether to include
     *     the JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.m3api.FindEventsMsg} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.m3api.FindEventsMsg.toObject = function (includeInstance, msg) {
        var f, obj = {
            eventId: jspb.Message.getFieldWithDefault(msg, 1, 0),
            spaceId: jspb.Message.getFieldWithDefault(msg, 2, 0),
            atTime: jspb.Message.getFieldWithDefault(msg, 3, 0)
        };

        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.m3api.FindEventsMsg}
 */
proto.m3api.FindEventsMsg.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.m3api.FindEventsMsg;
    return proto.m3api.FindEventsMsg.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.m3api.FindEventsMsg} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.m3api.FindEventsMsg}
 */
proto.m3api.FindEventsMsg.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = /** @type {number} */ (reader.readInt32());
                msg.setEventId(value);
                break;
            case 2:
                var value = /** @type {number} */ (reader.readInt32());
                msg.setSpaceId(value);
                break;
            case 3:
                var value = /** @type {number} */ (reader.readInt32());
                msg.setAtTime(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.m3api.FindEventsMsg.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.m3api.FindEventsMsg.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.m3api.FindEventsMsg} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.m3api.FindEventsMsg.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getEventId();
    if (f !== 0) {
        writer.writeInt32(
            1,
            f
        );
    }
    f = message.getSpaceId();
    if (f !== 0) {
        writer.writeInt32(
            2,
            f
        );
    }
    f = message.getAtTime();
    if (f !== 0) {
        writer.writeInt32(
            3,
            f
        );
    }
};


/**
 * optional int32 event_id = 1;
 * @return {number}
 */
proto.m3api.FindEventsMsg.prototype.getEventId = function () {
    return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.m3api.FindEventsMsg} returns this
 */
proto.m3api.FindEventsMsg.prototype.setEventId = function (value) {
    return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int32 space_id = 2;
 * @return {number}
 */
proto.m3api.FindEventsMsg.prototype.getSpaceId = function () {
    return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.m3api.FindEventsMsg} returns this
 */
proto.m3api.FindEventsMsg.prototype.setSpaceId = function (value) {
    return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int32 at_time = 3;
 * @return {number}
 */
proto.m3api.FindEventsMsg.prototype.getAtTime = function () {
    return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.m3api.FindEventsMsg} returns this
 */
proto.m3api.FindEventsMsg.prototype.setAtTime = function (value) {
    return jspb.Message.setProto3IntField(this, 3, value);
};


if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * Optional fields that are not set will be set to undefined.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
     * @param {boolean=} opt_includeInstance Deprecated. whether to include the
     *     JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.m3api.EventMsg.prototype.toObject = function (opt_includeInstance) {
        return proto.m3api.EventMsg.toObject(opt_includeInstance, this);
    };


    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Deprecated. Whether to include
     *     the JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.m3api.EventMsg} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.m3api.EventMsg.toObject = function (includeInstance, msg) {
        var f, obj = {
            eventId: jspb.Message.getFieldWithDefault(msg, 1, 0),
            spaceId: jspb.Message.getFieldWithDefault(msg, 2, 0),
            growthType: jspb.Message.getFieldWithDefault(msg, 3, 0),
            growthIndex: jspb.Message.getFieldWithDefault(msg, 4, 0),
            growthOffset: jspb.Message.getFieldWithDefault(msg, 5, 0),
            creationTime: jspb.Message.getFieldWithDefault(msg, 6, 0),
            pathCtxId: jspb.Message.getFieldWithDefault(msg, 7, 0),
            color: jspb.Message.getFieldWithDefault(msg, 8, 0),
            rootNode: (f = msg.getRootNode()) && proto.m3api.NodeEventMsg.toObject(includeInstance, f),
            maxNodeTime: jspb.Message.getFieldWithDefault(msg, 10, 0)
        };

        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.m3api.EventMsg}
 */
proto.m3api.EventMsg.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.m3api.EventMsg;
    return proto.m3api.EventMsg.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.m3api.EventMsg} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.m3api.EventMsg}
 */
proto.m3api.EventMsg.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = /** @type {number} */ (reader.readInt32());
                msg.setEventId(value);
                break;
            case 2:
                var value = /** @type {number} */ (reader.readInt32());
                msg.setSpaceId(value);
                break;
            case 3:
                var value = /** @type {number} */ (reader.readInt32());
                msg.setGrowthType(value);
                break;
            case 4:
                var value = /** @type {number} */ (reader.readInt32());
                msg.setGrowthIndex(value);
                break;
            case 5:
                var value = /** @type {number} */ (reader.readInt32());
                msg.setGrowthOffset(value);
                break;
            case 6:
                var value = /** @type {number} */ (reader.readInt32());
                msg.setCreationTime(value);
                break;
            case 7:
                var value = /** @type {number} */ (reader.readInt32());
                msg.setPathCtxId(value);
                break;
            case 8:
                var value = /** @type {number} */ (reader.readUint32());
                msg.setColor(value);
                break;
            case 9:
                var value = new proto.m3api.NodeEventMsg;
                reader.readMessage(value, proto.m3api.NodeEventMsg.deserializeBinaryFromReader);
                msg.setRootNode(value);
                break;
            case 10:
                var value = /** @type {number} */ (reader.readInt32());
                msg.setMaxNodeTime(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.m3api.EventMsg.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.m3api.EventMsg.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.m3api.EventMsg} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.m3api.EventMsg.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getEventId();
    if (f !== 0) {
        writer.writeInt32(
            1,
            f
        );
    }
    f = message.getSpaceId();
    if (f !== 0) {
        writer.writeInt32(
            2,
            f
        );
    }
    f = message.getGrowthType();
    if (f !== 0) {
        writer.writeInt32(
            3,
            f
        );
    }
    f = message.getGrowthIndex();
    if (f !== 0) {
        writer.writeInt32(
            4,
            f
        );
    }
    f = message.getGrowthOffset();
    if (f !== 0) {
        writer.writeInt32(
            5,
            f
        );
    }
    f = message.getCreationTime();
    if (f !== 0) {
        writer.writeInt32(
            6,
            f
        );
    }
    f = message.getPathCtxId();
    if (f !== 0) {
        writer.writeInt32(
            7,
            f
        );
    }
    f = message.getColor();
    if (f !== 0) {
        writer.writeUint32(
            8,
            f
        );
    }
    f = message.getRootNode();
    if (f != null) {
        writer.writeMessage(
            9,
            f,
            proto.m3api.NodeEventMsg.serializeBinaryToWriter
        );
    }
    f = message.getMaxNodeTime();
    if (f !== 0) {
        writer.writeInt32(
            10,
            f
        );
    }
};


/**
 * optional int32 event_id = 1;
 * @return {number}
 */
proto.m3api.EventMsg.prototype.getEventId = function () {
    return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.m3api.EventMsg} returns this
 */
proto.m3api.EventMsg.prototype.setEventId = function (value) {
    return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int32 space_id = 2;
 * @return {number}
 */
proto.m3api.EventMsg.prototype.getSpaceId = function () {
    return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.m3api.EventMsg} returns this
 */
proto.m3api.EventMsg.prototype.setSpaceId = function (value) {
    return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int32 growth_type = 3;
 * @return {number}
 */
proto.m3api.EventMsg.prototype.getGrowthType = function () {
    return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.m3api.EventMsg} returns this
 */
proto.m3api.EventMsg.prototype.setGrowthType = function (value) {
    return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional int32 growth_index = 4;
 * @return {number}
 */
proto.m3api.EventMsg.prototype.getGrowthIndex = function () {
    return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.m3api.EventMsg} returns this
 */
proto.m3api.EventMsg.prototype.setGrowthIndex = function (value) {
    return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional int32 growth_offset = 5;
 * @return {number}
 */
proto.m3api.EventMsg.prototype.getGrowthOffset = function () {
    return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.m3api.EventMsg} returns this
 */
proto.m3api.EventMsg.prototype.setGrowthOffset = function (value) {
    return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional int32 creation_time = 6;
 * @return {number}
 */
proto.m3api.EventMsg.prototype.getCreationTime = function () {
    return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.m3api.EventMsg} returns this
 */
proto.m3api.EventMsg.prototype.setCreationTime = function (value) {
    return jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional int32 path_ctx_id = 7;
 * @return {number}
 */
proto.m3api.EventMsg.prototype.getPathCtxId = function () {
    return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.m3api.EventMsg} returns this
 */
proto.m3api.EventMsg.prototype.setPathCtxId = function (value) {
    return jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional uint32 color = 8;
 * @return {number}
 */
proto.m3api.EventMsg.prototype.getColor = function () {
    return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/**
 * @param {number} value
 * @return {!proto.m3api.EventMsg} returns this
 */
proto.m3api.EventMsg.prototype.setColor = function (value) {
    return jspb.Message.setProto3IntField(this, 8, value);
};


/**
 * optional NodeEventMsg root_node = 9;
 * @return {?proto.m3api.NodeEventMsg}
 */
proto.m3api.EventMsg.prototype.getRootNode = function () {
    return /** @type{?proto.m3api.NodeEventMsg} */ (
        jspb.Message.getWrapperField(this, proto.m3api.NodeEventMsg, 9));
};


/**
 * @param {?proto.m3api.NodeEventMsg|undefined} value
 * @return {!proto.m3api.EventMsg} returns this
 */
proto.m3api.EventMsg.prototype.setRootNode = function (value) {
    return jspb.Message.setWrapperField(this, 9, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.m3api.EventMsg} returns this
 */
proto.m3api.EventMsg.prototype.clearRootNode = function () {
    return this.setRootNode(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.m3api.EventMsg.prototype.hasRootNode = function () {
    return jspb.Message.getField(this, 9) != null;
};


/**
 * optional int32 max_node_time = 10;
 * @return {number}
 */
proto.m3api.EventMsg.prototype.getMaxNodeTime = function () {
    return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 10, 0));
};


/**
 * @param {number} value
 * @return {!proto.m3api.EventMsg} returns this
 */
proto.m3api.EventMsg.prototype.setMaxNodeTime = function (value) {
    return jspb.Message.setProto3IntField(this, 10, value);
};


/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.m3api.EventListMsg.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * Optional fields that are not set will be set to undefined.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
     * @param {boolean=} opt_includeInstance Deprecated. whether to include the
     *     JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.m3api.EventListMsg.prototype.toObject = function (opt_includeInstance) {
        return proto.m3api.EventListMsg.toObject(opt_includeInstance, this);
    };


    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Deprecated. Whether to include
     *     the JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.m3api.EventListMsg} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.m3api.EventListMsg.toObject = function (includeInstance, msg) {
        var f, obj = {
            eventsList: jspb.Message.toObjectList(msg.getEventsList(),
                proto.m3api.EventMsg.toObject, includeInstance)
        };

        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.m3api.EventListMsg}
 */
proto.m3api.EventListMsg.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.m3api.EventListMsg;
    return proto.m3api.EventListMsg.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.m3api.EventListMsg} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.m3api.EventListMsg}
 */
proto.m3api.EventListMsg.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = new proto.m3api.EventMsg;
                reader.readMessage(value, proto.m3api.EventMsg.deserializeBinaryFromReader);
                msg.addEvents(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.m3api.EventListMsg.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.m3api.EventListMsg.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.m3api.EventListMsg} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.m3api.EventListMsg.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getEventsList();
    if (f.length > 0) {
        writer.writeRepeatedMessage(
            1,
            f,
            proto.m3api.EventMsg.serializeBinaryToWriter
        );
    }
};


/**
 * repeated EventMsg events = 1;
 * @return {!Array<!proto.m3api.EventMsg>}
 */
proto.m3api.EventListMsg.prototype.getEventsList = function () {
    return /** @type{!Array<!proto.m3api.EventMsg>} */ (
        jspb.Message.getRepeatedWrapperField(this, proto.m3api.EventMsg, 1));
};


/**
 * @param {!Array<!proto.m3api.EventMsg>} value
 * @return {!proto.m3api.EventListMsg} returns this
 */
proto.m3api.EventListMsg.prototype.setEventsList = function (value) {
    return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.m3api.EventMsg=} opt_value
 * @param {number=} opt_index
 * @return {!proto.m3api.EventMsg}
 */
proto.m3api.EventListMsg.prototype.addEvents = function (opt_value, opt_index) {
    return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.m3api.EventMsg, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.m3api.EventListMsg} returns this
 */
proto.m3api.EventListMsg.prototype.clearEventsList = function () {
    return this.setEventsList([]);
};


if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * Optional fields that are not set will be set to undefined.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
     * @param {boolean=} opt_includeInstance Deprecated. whether to include the
     *     JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.m3api.FindNodeEventsMsg.prototype.toObject = function (opt_includeInstance) {
        return proto.m3api.FindNodeEventsMsg.toObject(opt_includeInstance, this);
    };


    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Deprecated. Whether to include
     *     the JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.m3api.FindNodeEventsMsg} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.m3api.FindNodeEventsMsg.toObject = function (includeInstance, msg) {
        var f, obj = {
            spaceId: jspb.Message.getFieldWithDefault(msg, 1, 0),
            eventId: jspb.Message.getFieldWithDefault(msg, 2, 0),
            atTime: jspb.Message.getFieldWithDefault(msg, 3, 0)
        };

        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.m3api.FindNodeEventsMsg}
 */
proto.m3api.FindNodeEventsMsg.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.m3api.FindNodeEventsMsg;
    return proto.m3api.FindNodeEventsMsg.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.m3api.FindNodeEventsMsg} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.m3api.FindNodeEventsMsg}
 */
proto.m3api.FindNodeEventsMsg.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = /** @type {number} */ (reader.readInt32());
                msg.setSpaceId(value);
                break;
            case 2:
                var value = /** @type {number} */ (reader.readInt32());
                msg.setEventId(value);
                break;
            case 3:
                var value = /** @type {number} */ (reader.readInt32());
                msg.setAtTime(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.m3api.FindNodeEventsMsg.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.m3api.FindNodeEventsMsg.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.m3api.FindNodeEventsMsg} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.m3api.FindNodeEventsMsg.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getSpaceId();
    if (f !== 0) {
        writer.writeInt32(
            1,
            f
        );
    }
    f = message.getEventId();
    if (f !== 0) {
        writer.writeInt32(
            2,
            f
        );
    }
    f = message.getAtTime();
    if (f !== 0) {
        writer.writeInt32(
            3,
            f
        );
    }
};


/**
 * optional int32 space_id = 1;
 * @return {number}
 */
proto.m3api.FindNodeEventsMsg.prototype.getSpaceId = function () {
    return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.m3api.FindNodeEventsMsg} returns this
 */
proto.m3api.FindNodeEventsMsg.prototype.setSpaceId = function (value) {
    return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int32 event_id = 2;
 * @return {number}
 */
proto.m3api.FindNodeEventsMsg.prototype.getEventId = function () {
    return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.m3api.FindNodeEventsMsg} returns this
 */
proto.m3api.FindNodeEventsMsg.prototype.setEventId = function (value) {
    return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int32 at_time = 3;
 * @return {number}
 */
proto.m3api.FindNodeEventsMsg.prototype.getAtTime = function () {
    return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.m3api.FindNodeEventsMsg} returns this
 */
proto.m3api.FindNodeEventsMsg.prototype.setAtTime = function (value) {
    return jspb.Message.setProto3IntField(this, 3, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.m3api.NodeEventListMsg.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * Optional fields that are not set will be set to undefined.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
     * @param {boolean=} opt_includeInstance Deprecated. whether to include the
     *     JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.m3api.NodeEventListMsg.prototype.toObject = function (opt_includeInstance) {
        return proto.m3api.NodeEventListMsg.toObject(opt_includeInstance, this);
    };


    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Deprecated. Whether to include
     *     the JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.m3api.NodeEventListMsg} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.m3api.NodeEventListMsg.toObject = function (includeInstance, msg) {
        var f, obj = {
            nodesList: jspb.Message.toObjectList(msg.getNodesList(),
                proto.m3api.NodeEventMsg.toObject, includeInstance)
        };

        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.m3api.NodeEventListMsg}
 */
proto.m3api.NodeEventListMsg.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.m3api.NodeEventListMsg;
    return proto.m3api.NodeEventListMsg.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.m3api.NodeEventListMsg} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.m3api.NodeEventListMsg}
 */
proto.m3api.NodeEventListMsg.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = new proto.m3api.NodeEventMsg;
                reader.readMessage(value, proto.m3api.NodeEventMsg.deserializeBinaryFromReader);
                msg.addNodes(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.m3api.NodeEventListMsg.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.m3api.NodeEventListMsg.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.m3api.NodeEventListMsg} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.m3api.NodeEventListMsg.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getNodesList();
    if (f.length > 0) {
        writer.writeRepeatedMessage(
            1,
            f,
            proto.m3api.NodeEventMsg.serializeBinaryToWriter
        );
    }
};


/**
 * repeated NodeEventMsg nodes = 1;
 * @return {!Array<!proto.m3api.NodeEventMsg>}
 */
proto.m3api.NodeEventListMsg.prototype.getNodesList = function () {
    return /** @type{!Array<!proto.m3api.NodeEventMsg>} */ (
        jspb.Message.getRepeatedWrapperField(this, proto.m3api.NodeEventMsg, 1));
};


/**
 * @param {!Array<!proto.m3api.NodeEventMsg>} value
 * @return {!proto.m3api.NodeEventListMsg} returns this
 */
proto.m3api.NodeEventListMsg.prototype.setNodesList = function (value) {
    return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.m3api.NodeEventMsg=} opt_value
 * @param {number=} opt_index
 * @return {!proto.m3api.NodeEventMsg}
 */
proto.m3api.NodeEventListMsg.prototype.addNodes = function (opt_value, opt_index) {
    return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.m3api.NodeEventMsg, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.m3api.NodeEventListMsg} returns this
 */
proto.m3api.NodeEventListMsg.prototype.clearNodesList = function () {
    return this.setNodesList([]);
};


if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * Optional fields that are not set will be set to undefined.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
     * @param {boolean=} opt_includeInstance Deprecated. whether to include the
     *     JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.m3api.SpaceTimeRequestMsg.prototype.toObject = function (opt_includeInstance) {
        return proto.m3api.SpaceTimeRequestMsg.toObject(opt_includeInstance, this);
    };


    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Deprecated. Whether to include
     *     the JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.m3api.SpaceTimeRequestMsg} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.m3api.SpaceTimeRequestMsg.toObject = function (includeInstance, msg) {
        var f, obj = {
            spaceId: jspb.Message.getFieldWithDefault(msg, 1, 0),
            currentTime: jspb.Message.getFieldWithDefault(msg, 2, 0)
        };

        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.m3api.SpaceTimeRequestMsg}
 */
proto.m3api.SpaceTimeRequestMsg.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.m3api.SpaceTimeRequestMsg;
    return proto.m3api.SpaceTimeRequestMsg.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.m3api.SpaceTimeRequestMsg} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.m3api.SpaceTimeRequestMsg}
 */
proto.m3api.SpaceTimeRequestMsg.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = /** @type {number} */ (reader.readInt32());
                msg.setSpaceId(value);
                break;
            case 2:
                var value = /** @type {number} */ (reader.readInt32());
                msg.setCurrentTime(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.m3api.SpaceTimeRequestMsg.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.m3api.SpaceTimeRequestMsg.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.m3api.SpaceTimeRequestMsg} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.m3api.SpaceTimeRequestMsg.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getSpaceId();
    if (f !== 0) {
        writer.writeInt32(
            1,
            f
        );
    }
    f = message.getCurrentTime();
    if (f !== 0) {
        writer.writeInt32(
            2,
            f
        );
    }
};


/**
 * optional int32 space_id = 1;
 * @return {number}
 */
proto.m3api.SpaceTimeRequestMsg.prototype.getSpaceId = function () {
    return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.m3api.SpaceTimeRequestMsg} returns this
 */
proto.m3api.SpaceTimeRequestMsg.prototype.setSpaceId = function (value) {
    return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int32 current_time = 2;
 * @return {number}
 */
proto.m3api.SpaceTimeRequestMsg.prototype.getCurrentTime = function () {
    return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.m3api.SpaceTimeRequestMsg} returns this
 */
proto.m3api.SpaceTimeRequestMsg.prototype.setCurrentTime = function (value) {
    return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.m3api.SpaceTimeResponseMsg.repeatedFields_ = [3, 5];



if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * Optional fields that are not set will be set to undefined.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
     * @param {boolean=} opt_includeInstance Deprecated. whether to include the
     *     JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.m3api.SpaceTimeResponseMsg.prototype.toObject = function (opt_includeInstance) {
        return proto.m3api.SpaceTimeResponseMsg.toObject(opt_includeInstance, this);
    };


    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Deprecated. Whether to include
     *     the JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.m3api.SpaceTimeResponseMsg} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.m3api.SpaceTimeResponseMsg.toObject = function (includeInstance, msg) {
        var f, obj = {
            spaceId: jspb.Message.getFieldWithDefault(msg, 1, 0),
            currentTime: jspb.Message.getFieldWithDefault(msg, 2, 0),
            activeEventsList: jspb.Message.toObjectList(msg.getActiveEventsList(),
                proto.m3api.EventMsg.toObject, includeInstance),
            nbActiveNodes: jspb.Message.getFieldWithDefault(msg, 4, 0),
            activeNodesList: jspb.Message.toObjectList(msg.getActiveNodesList(),
                proto.m3api.NodeEventMsg.toObject, includeInstance)
        };

        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.m3api.SpaceTimeResponseMsg}
 */
proto.m3api.SpaceTimeResponseMsg.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.m3api.SpaceTimeResponseMsg;
    return proto.m3api.SpaceTimeResponseMsg.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.m3api.SpaceTimeResponseMsg} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.m3api.SpaceTimeResponseMsg}
 */
proto.m3api.SpaceTimeResponseMsg.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = /** @type {number} */ (reader.readInt32());
                msg.setSpaceId(value);
                break;
            case 2:
                var value = /** @type {number} */ (reader.readInt32());
                msg.setCurrentTime(value);
                break;
            case 3:
                var value = new proto.m3api.EventMsg;
                reader.readMessage(value, proto.m3api.EventMsg.deserializeBinaryFromReader);
                msg.addActiveEvents(value);
                break;
            case 4:
                var value = /** @type {number} */ (reader.readInt32());
                msg.setNbActiveNodes(value);
                break;
            case 5:
                var value = new proto.m3api.NodeEventMsg;
                reader.readMessage(value, proto.m3api.NodeEventMsg.deserializeBinaryFromReader);
                msg.addActiveNodes(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.m3api.SpaceTimeResponseMsg.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.m3api.SpaceTimeResponseMsg.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.m3api.SpaceTimeResponseMsg} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.m3api.SpaceTimeResponseMsg.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getSpaceId();
    if (f !== 0) {
        writer.writeInt32(
            1,
            f
        );
    }
    f = message.getCurrentTime();
    if (f !== 0) {
        writer.writeInt32(
            2,
            f
        );
    }
    f = message.getActiveEventsList();
    if (f.length > 0) {
        writer.writeRepeatedMessage(
            3,
            f,
            proto.m3api.EventMsg.serializeBinaryToWriter
        );
    }
    f = message.getNbActiveNodes();
    if (f !== 0) {
        writer.writeInt32(
            4,
            f
        );
    }
    f = message.getActiveNodesList();
    if (f.length > 0) {
        writer.writeRepeatedMessage(
            5,
            f,
            proto.m3api.NodeEventMsg.serializeBinaryToWriter
        );
    }
};


/**
 * optional int32 space_id = 1;
 * @return {number}
 */
proto.m3api.SpaceTimeResponseMsg.prototype.getSpaceId = function () {
    return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.m3api.SpaceTimeResponseMsg} returns this
 */
proto.m3api.SpaceTimeResponseMsg.prototype.setSpaceId = function (value) {
    return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int32 current_time = 2;
 * @return {number}
 */
proto.m3api.SpaceTimeResponseMsg.prototype.getCurrentTime = function () {
    return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.m3api.SpaceTimeResponseMsg} returns this
 */
proto.m3api.SpaceTimeResponseMsg.prototype.setCurrentTime = function (value) {
    return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * repeated EventMsg active_events = 3;
 * @return {!Array<!proto.m3api.EventMsg>}
 */
proto.m3api.SpaceTimeResponseMsg.prototype.getActiveEventsList = function () {
    return /** @type{!Array<!proto.m3api.EventMsg>} */ (
        jspb.Message.getRepeatedWrapperField(this, proto.m3api.EventMsg, 3));
};


/**
 * @param {!Array<!proto.m3api.EventMsg>} value
 * @return {!proto.m3api.SpaceTimeResponseMsg} returns this
 */
proto.m3api.SpaceTimeResponseMsg.prototype.setActiveEventsList = function (value) {
    return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.m3api.EventMsg=} opt_value
 * @param {number=} opt_index
 * @return {!proto.m3api.EventMsg}
 */
proto.m3api.SpaceTimeResponseMsg.prototype.addActiveEvents = function (opt_value, opt_index) {
    return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.m3api.EventMsg, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.m3api.SpaceTimeResponseMsg} returns this
 */
proto.m3api.SpaceTimeResponseMsg.prototype.clearActiveEventsList = function () {
    return this.setActiveEventsList([]);
};


/**
 * optional int32 nb_active_nodes = 4;
 * @return {number}
 */
proto.m3api.SpaceTimeResponseMsg.prototype.getNbActiveNodes = function () {
    return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.m3api.SpaceTimeResponseMsg} returns this
 */
proto.m3api.SpaceTimeResponseMsg.prototype.setNbActiveNodes = function (value) {
    return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * repeated NodeEventMsg active_nodes = 5;
 * @return {!Array<!proto.m3api.NodeEventMsg>}
 */
proto.m3api.SpaceTimeResponseMsg.prototype.getActiveNodesList = function () {
    return /** @type{!Array<!proto.m3api.NodeEventMsg>} */ (
        jspb.Message.getRepeatedWrapperField(this, proto.m3api.NodeEventMsg, 5));
};


/**
 * @param {!Array<!proto.m3api.NodeEventMsg>} value
 * @return {!proto.m3api.SpaceTimeResponseMsg} returns this
 */
proto.m3api.SpaceTimeResponseMsg.prototype.setActiveNodesList = function (value) {
    return jspb.Message.setRepeatedWrapperField(this, 5, value);
};


/**
 * @param {!proto.m3api.NodeEventMsg=} opt_value
 * @param {number=} opt_index
 * @return {!proto.m3api.NodeEventMsg}
 */
proto.m3api.SpaceTimeResponseMsg.prototype.addActiveNodes = function (opt_value, opt_index) {
    return jspb.Message.addToRepeatedWrapperField(this, 5, opt_value, proto.m3api.NodeEventMsg, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.m3api.SpaceTimeResponseMsg} returns this
 */
proto.m3api.SpaceTimeResponseMsg.prototype.clearActiveNodesList = function () {
    return this.setActiveNodesList([]);
};


goog.object.extend(exports, proto.m3api);
